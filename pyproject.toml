# faker  uses setup.py currently.  If/when it ever uses the pyproject
# as the installer handler, the following stanzas are setup so it can be 
# used with or without poetry and also supports editable installs (PEP 660) 
# without breaking IDE and linter inspection.

################################################################################
#[tool.poetry]
#name = "faker"
#version = ""
#description = "Faker is a Python package that generates fake data for you."
#authors = ["joke2k <joke2k@gmail.com>"]
#
## It's possible to add optional dependencies using the poetry CLI tool via:
##   poetry add --optional some_dev_pkg
## This will set `optional = true` flag in [tool.poetry.dependencies], as seen below
## But then you need to remember to manually edit the [tool.poetry.extras] dev section
## and declare the package. This allows `pip install .[dev]` to work as expected
## Poetry users will need to use the `--extras dev`.
#
#
#[tool.poetry.dependencies]
#python = "^3.12"
#typing_extensions = {version = ">=3.10.0.1", python = "<=3.8"}
#python-dateutil = ">=2.4"
#
## developer environment only packages
#black = {version = "*", optional = true}
#coverage = {version = ">=5.2", optional = true}
#mypy = {version = "*", optional = true}
#ruff = {version = ">=0.1.13", optional = true}
#tox = {version = "*", optional = true}
#flake8 = {version = ">=4.0.0", optional = true}
#flake8-comprehensions = {version = "*", optional = true}
#freezegun = {version = "<0.4", optional = true}
#pytest = {version = ">=6.0.1", optional = true}
#pytest-mock = {version = "*", optional = true}
#validators = {version = ">=0.13.0", optional = true}
#Pillow = {version = "*", optional = true}
#xmltodict = {version = "*", optional = true}
#ukpostcodeparser = {version = ">=1.1.1", optional = true}
#
#[tool.poetry.extras]
#dev = [
#    "black",
#    "coverage",
#    "mypy",
#    "ruff",
#    "tox",
#    "flake8",
#    "flake8-comprehensions",
#    "freezegun",
#    "pytest",
#    "pytest",
#    "validators",
#    "Pillow",
#    "xmltodict",
#    "ukpostcodeparser",
#]
#
#[build-system]
#requires = ["poetry-core>=1.8.1"]
#build-backend = "poetry.core.masonry.api"


################################################################################
[tool.black]
line-length = 120
target-version = ['py311']
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
extend-exclude = '''
(
    \.idea
    | \.git
    | \.mypy_cache
    | \.tox
)
'''

################################################################################
#[tool.isort]
#line_length = 120
#multi_line_output = 3
#known_first_party="faker"
#include_trailing_comma = true
#use_parentheses = true
#sections=["FUTURE","STDLIB","THIRDPARTY","FIRSTPARTY","LOCALFOLDER"]
#skip = [".idea"]
#lines_between_types=1
#profile="black"


################################################################################
#[tool.mypy]
#allow_redefinition = true
#check_untyped_defs = true
#disallow_incomplete_defs = true
#disallow_subclassing_any = true
#follow_imports="silent"
#ignore_missing_imports = true
#pretty = true
#show_column_numbers = true
#show_error_codes = true
#warn_redundant_casts = true
#warn_unused_ignores = false


################################################################################
[tool.ruff]
select = [
    "A",  # flake8-builtins
    "ANN",  # flake8-annotations  # coming back to this one later to compare against mypy
    "ARG",  # flake8-unused-arguments
    "B",  # flake8-bugbear
    "BLE",  # flake8-blind-except
    "C4",  # flake8-comprehensions
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "EM",  # flake8-errmsg
    "ERA",  # eradicate
    "F",  # Pyflakes
    "FA",  # flake8-future-annotations
    "FBT",  # flake8-boolean-trap
    "FIX",  # flake8-fixme
    "FLY",  # flynt
    "I",  # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PGH",  # pygrep-hooks
    "PIE",  # flake8-pie
    "PL",  # pylint
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # ruff specific
    "SIM",  # flake8-simplify
    "T10",  # flake8-debugger
    "T20",  # flake8-print
    "TCH",  # flake8-type-checking
    "TRY",  # tryceratops
    "UP",  # python upgrade
    "W",  # pycodestyle warning
    "YTT",  # flake8-2020

    # we would like these someday, but not yet
    # "FURB",  # refurb
]
ignore = [
    "D107",  # missing __init__ docstring, we do that in the class docstring.
    "D203",  # one blank line before class docstring, no thanks!
    "D212",  # multi line summary first line, we want a one line summary.
    "ANN101",  # missing self annotation, we only annotate self when we return it.
    "ANN102",  # missing cls annotation, we only annotate cls when we return it.
    "E203", # whitespace before punctuation
]


# Same as Black.
line-length = 120
target-version = "py311"

exclude = [
    ".github",
    ".pytest_cache",
    ".venv",
    "venv",
    "dockerfiles",
    "docs",
    ".coverage",
    ".coveragerc",
    ".env",
    ".env.example",
    ".flake8",
    ".gitignore",
    "alembic.ini",
    "bandit.yaml",
    "docker-compose-dev.yaml",
    "docker-compose-pro.yaml",
    "Makefile",
    "mkdocks.yml",
    "mypy.ini",
    "poetry.lock",
    "pyproject.toml",
    "pytest.ini",
    "README.md",
    ".idea",
]


[tool.ruff.lint]
extend-safe-fixes = [
    "EM101",
    "EM102",
    "TCH001", "TCH002", "TCH003", "TCH004",
    #    "SIM108"
    "C419",
    "D200", "D205",
    "PT003", "PT006", "PT018",
    "RET504",
    "UP007",
]


[tool.ruff.per-file-ignores]
"tests/**" = [
    "D",  # we don't need public-API-polished docstrings in tests.
    "FBT",  # using a boolean as a test object is useful!
    "PLR",  # likewise using specific numbers and strings in tests.
]


[tool.ruff.isort]
combine-as-imports = true
split-on-trailing-comma = true

[tool.ruff.flake8-pytest-style]
mark-parentheses = false

[tool.ruff.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.flake8-annotations]
suppress-none-returning = true
allow-star-arg-any = true


################################################################################
